-- phpMyAdmin SQL Dump
-- version 4.6.6deb4
-- https://www.phpmyadmin.net/
--
-- Client :  localhost:3306
-- Généré le :  Dim 11 Octobre 2020 à 09:10
-- Version du serveur :  10.1.44-MariaDB-0+deb9u1
-- Version de PHP :  7.2.31-1+0~20200514.41+debian9~1.gbpe2a56b

SET SQL_MODE = "NO_AUTO_VALUE_ON_ZERO";
SET time_zone = "+00:00";


/*!40101 SET @OLD_CHARACTER_SET_CLIENT=@@CHARACTER_SET_CLIENT */;
/*!40101 SET @OLD_CHARACTER_SET_RESULTS=@@CHARACTER_SET_RESULTS */;
/*!40101 SET @OLD_COLLATION_CONNECTION=@@COLLATION_CONNECTION */;
/*!40101 SET NAMES utf8mb4 */;

--
-- Base de données :  `blog`
--

-- --------------------------------------------------------

--
-- Structure de la table `articles`
--

CREATE TABLE `articles` (
  `id` int(11) NOT NULL,
  `titre` varchar(255) NOT NULL,
  `corps` text NOT NULL,
  `categorie` varchar(191) CHARACTER SET utf8mb4 NOT NULL,
  `created` datetime NOT NULL,
  `modified` datetime NOT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

--
-- Contenu de la table `articles`
--

INSERT INTO `articles` (`id`, `titre`, `corps`, `categorie`, `created`, `modified`) VALUES
(19, 'Installer CakePHP 4', 'PHP 7.2 minimum<br />\r\nExtensions PHP requises : mbstring, intl et simplexml<br />\r\nEn console : <br />\r\n<pre><code>composer self-update &amp;&amp; composer create-project --prefer-dist cakephp/app:4.* my_app_name</code></pre>', 'Cakephp 4', '2020-01-29 14:22:32', '2020-03-19 14:38:12'),
(20, 'Configuration de CakePHP 4', 'La configuration de la base de données se fait dans le fichier config/app_local.php et dans la section Datasources<br />\r\nrenseigner les champs : username,password et datasource', 'Cakephp 4', '2020-03-12 11:22:42', '2020-03-12 11:22:42'),
(21, 'Génération de code avec l\'outil Bake', 'Se placer en console à la racine du projet : <br /><br />\r\nRetournera la liste des actions possibles avec la console Bake<br />\r\n<pre><code>bin/cake bake</code></pre><br />\r\nGénérer une cell<br />\r\n<pre><code>bin/cake bake cell nomdelacell</code></pre><br />\r\nGénérer un composant<br />\r\n<pre><code>bin/cake bake component nomducomponent</code></pre><br />\r\nGénérer une controller (CRUD)<br />\r\n<pre><code>bin/cake bake controller nomducontroller</code></pre><br />\r\nGénérer un jeu de données sur l&#039;objet en paramètres<br />\r\n<pre><code>bin/cake bake fixture nomdelatable</code></pre><br />\r\nGénérera un formulaire<br />\r\n<pre><code>bin/cake bake form nomform</code></pre><br />\r\nGénérera un classe générique pour l&#039;envoi de mail<br />\r\n<pre><code>bin/cake bake mailer nommailer</code></pre><br />\r\nGénérera un modèle : classe + entité<br />\r\n<pre><code>bin/cake bake model nommodel</code></pre><br />\r\nGénérera les vues pour la table donnée<br />\r\n<pre><code>bin/cake bake template nomtable</code></pre><br />\r\nGénérera un CRUD complet : Model, Vue et Controller<br />\r\n<pre><code>bin/cake bake all nomtable</code></pre>', 'Cakephp 4', '2020-03-12 11:32:35', '2020-03-12 14:33:35'),
(23, 'Installation et configuration de Let\'s Encrypt', 'Environnement : Debian 9<br />\r\nSe placer à la racine<br />\r\n<pre><code>cd /</code></pre><br />\r\nMettre à jour<br />\r\n<pre><code>apt-get update</code></pre><br />\r\n<pre><code>apt-get upgrade</code></pre><br />\r\nInstaller le Package Git sinon existant<br />\r\n<pre><code>apt-get install git-core</code></pre><br />\r\nRécupérer Let&#039;s Encrypt<br />\r\n<pre><code>git clone https://github.com/letsencrypt/letsencrypt</code></pre><br />\r\nEntrer dans le répertoire nouvellement crée<br />\r\n<pre><code>cd letsencrypt</code></pre><br />\r\nInstaller Let&#039;s Encrypt<br />\r\n<pre><code>./letsencrypt-auto</code></pre><br />\r\nSuivre les instructions de configuration en cas de non détection du nom de domaine installée<br />\r\nRedémarrer Apache<br />\r\n<pre><code>service apache2 restart</code></pre><br />\r\nRenouvellement automatique du certificat<br />\r\nCommande tous les 90 jours<br />\r\n<pre><code>/letsencrypt/letsencrypt-auto renew</code></pre><br />\r\nPuis redémarrer Apache<br />\r\n<pre><code>systemctl reload apache2</code></pre><br />\r\nCrée une tâche CRON<br />\r\n<pre><code>crontab -e</code></pre><br />\r\nCommande Cron<br />\r\n<pre><code>* 4 * * 0 /letsencrypt/letsencrypt-auto renew &gt;&gt; /var/log/certificates-renew.log<br />\r\n30 4 * * 0 systemctl reload apache2</code></pre>', 'Let\'s Encrypt', '2020-03-14 21:21:44', '2020-03-14 21:21:44'),
(24, 'Installer Apache 2 sous Debian 9', 'S&#039;assurer d&#039;être en super utilisateur<br />\r\n<pre><code>sudo apt update<br />\r\nsudo apt install apache2</code></pre><br />\r\nApache est installé après ça<br />\r\nVérifier son statut<br />\r\n<pre><code>sudo systemctl status apache2</code></pre><br />\r\nTester son installation<br />\r\n<pre><code>http://YOUR_IP_OR_DOMAIN/</code></pre><br />\r\nLa page d&#039;accueil par défaut d&#039;Apache devrait être visible.', 'Apache', '2020-03-16 10:13:24', '2020-03-16 10:32:37'),
(25, 'Quelques commandes de l\'environnement Apache 2', 'Arrêter le service Apache 2<br />\r\n<pre><code>sudo systemctl stop apache2</code></pre><br />\r\nDémarrer le service Apache 2<br />\r\n<pre><code>sudo systemctl start apache2</code></pre><br />\r\nRedémarrer le service Apache 2<br />\r\n<pre><code>sudo systemctl restart apache2</code></pre><br />\r\nRedémarrer avec une nouvelle configuration<br />\r\n<pre><code>sudo systemctl reload apache2</code></pre><br />\r\nDésactiver le service Apache 2 au boot<br />\r\n<pre><code>sudo systemctl disable apache2</code></pre><br />\r\nActiver le service Apache 2 au boot<br />\r\n<pre><code>sudo systemctl enable apache2</code></pre>', 'Apache', '2020-03-16 10:17:00', '2020-03-16 10:17:00'),
(26, 'Structure des fichiers et bonnes pratiques', 'Sur les systèmes Debian, les fichiers de configuration se trouvent dans le répertoire suivant : <br />\r\n<pre><code>/etc/apache2</code></pre>.<br />\r\nLe fichier de configuration principal est le suivant : <br />\r\n<pre><code>/etc/apache2/apache2.conf</code></pre>.<br />\r\nLes ports que va écouter Apache se trouvent ici : <br />\r\n<pre><code>/etc/apache2/ports.conf</code></pre>.<br />\r\nLes hôtes virtuels se trouvent ici : <br />\r\n<pre><code>/etc/apache2/sites-available</code></pre>.<br />\r\nPour les relier au répertoire <pre><code>/etc/apache2/sites-enabled</code></pre> utilisé par Apache , crée un lien symbolique avec  <pre><code>a2ensite nomduvhost</code></pre>.<br />\r\nPour les désactiver, utiliser <pre><code>a2dissite</code></pre>.<br />\r\nSi mon domaine est domaine.com, utiliser :<br />\r\n<pre><code>/etc/apache2/sites-available/domaine.com.conf</code></pre>.<br />\r\nLes fichiers de configuration pour les différends modules se trouvent ici : <br />\r\n<pre><code>/etc/apache2/mods-available</code></pre>.<br />\r\nLes fichiers de logs et d&#039;erreur se trouvent ici : <br />\r\n<pre><code>/var/log/apache</code></pre>', 'Apache', '2020-03-16 10:29:41', '2020-03-16 10:29:41'),
(27, 'Installation de MariaDB sous Debian 9', 'Installer MariaDB avec la commande suivante : <br />\r\n<pre><code>sudo apt-get install mariadb-server</code></pre>.<br />\r\nSécuriser l&#039;installation : <br />\r\n<pre><code>sudo mysql_secure_installation</code></pre><br />\r\nEntrer le mot de passe root de Debian et répondre Y à toutes les questions. ', 'MariaDB', '2020-03-16 10:52:08', '2020-03-16 10:52:08'),
(28, 'Configuration de MariaDB sous Debian 9', 'Si on tente de se connecter avec <pre><code>mysql -u root -p</code></pre> on obtient l&#039;erreur suivante : <br />\r\n<pre><code>ERROR 1698 (28000): Access denied for user &#039;root&#039;@&#039;localhost&#039;</code></pre><br />\r\nIl y&#039; a une restriction sur l&#039; utilisateur root par défaut.<br />\r\nPour y remédier : <br />\r\n<pre><code>UPDATE user SET plugin=&#039;&#039; WHERE User=&#039;root&#039;; </code></pre><br />\r\npuis recharger les privilèges<br />\r\n<pre><code>FLUSH PRIVILEGES;</code></pre><br />\r\nQuitter ensuite MariaDB : <br />\r\n<pre><code>EXIT;</code></pre><br />\r\nOn peut désormais se connecter avec <pre><code>mysql -u root -p</code></pre>', 'MariaDB', '2020-03-16 10:57:24', '2020-03-16 20:55:46'),
(29, 'Installation de Phpmyadmin sur Debian 9', 'Exécuter les commandes suivantes<br />\r\n<pre><code> sudo apt update<br />\r\nsudo apt install phpmyadmin php-mbstring php-gettext<br />\r\n</code></pre><br />\r\nLors de l&#039;apparition de le fenêtre de configuration du serveur, appuyer sur Espace, Tab puis Entrée.<br />\r\nDire oui à la question sur dbconfig<br />\r\nChoisir un mot de passe pour Phpmyadmin<br />\r\nActiver ensuite l&#039;extension mbstring de PHP :<br />\r\n<pre><code>sudo phpenmod mbstring</code></pre><br />\r\nRedémarre ensuite Apache :<br />\r\n<pre><code>sudo systemctl restart apache2</code></pre><br />\r\nPour configurer un utilisateur voir https://christophekheder.com/blog/articles/tagged/MariaDB', 'Phpmyadmin', '2020-03-16 20:56:11', '2020-03-16 20:57:29'),
(30, 'Corriger le problème lors d\'une installation avec PHP 7.2 et PHP 7.3', 'Lors de l&#039;obtention de ce message : <pre><code>Warning in ./libraries/sql.lib.php#613<br />\r\ncount(): Parameter must be an array or an object that implements Countable</code></pre><br />\r\n<br />\r\nAvec PHP 7.2<br />\r\nOuvrir le fichier /usr/share/phpmyadmin/libraries/sql.lib.php<br />\r\n<pre><code>sudo nano /usr/share/phpmyadmin/libraries/sql.lib.php</code></pre><br />\r\nRemplacer (count($analyzed_sql_results[&#039;select_expr&#039;] == 1) par ((count($analyzed_sql_results[&#039;select_expr&#039;]) == 1)<br />\r\nSauvegarder<br />\r\nOuvrir le fichier usr/share/phpmyadmin/libraries/plugin_interface.lib.php<br />\r\n<pre><code>nano /usr/share/phpmyadmin/libraries/plugin_interface.lib.php</code></pre><br />\r\nRemplacer if ($options != null &amp;&amp; count($options) &gt; 0)  par if (! is_null($options) &amp;&amp; count((array)$options) &gt; 0) {<br />\r\nSauvegarder<br />\r\nRedémarrer le serveur<br />\r\n<pre><code>service apache2 restart</code></pre><br />\r\n<br />\r\nAvec PHP 7.3<br />\r\nOuvrir le fichier /usr/share/phpmyadmin/libraries/sql.lib.php<br />\r\n<pre><code>sudo nano /usr/share/phpmyadmin/libraries/sql.lib.php</code></pre><br />\r\nRemplacer (count($analyzed_sql_results[&#039;select_expr&#039;] == 1) par ((count($analyzed_sql_results[&#039;select_expr&#039;]) == 1)<br />\r\nSauvegarder<br />\r\nRedémarrer le serveur<br />\r\n<pre><code>service apache2 restart</code></pre>', 'Phpmyadmin', '2020-03-16 21:05:23', '2020-03-16 21:07:33'),
(31, 'Installation de Composer sur Debian 9', 'Installation des paquets nécessaires<br /> <pre><code>sudo apt update<br /> sudo apt install php-cli php-zip wget unzip</code></pre><br /> Utilisation de PHP Cli pour télécharger<br /> <pre><code>php -r &quot;copy(&#039;https://getcomposer.org/installer&#039;, &#039;composer-setup.php&#039;);&quot;</code></pre><br /> Vérification de l&#039;intégrité du script<br /> Téléchargement de la signature du dernier script de Composer<br /> <pre><code>HASH=&quot;$(wget -q -O - https://composer.github.io/installer.sig)&quot;</code></pre><br />Vérification de la non corruption du script<br /> <pre><code>php -r &quot;if (hash_file(&#039;SHA384&#039;, &#039;composer-setup.php&#039;) === &#039;$HASH&#039;) { echo &#039;Installer verified&#039;; } else { echo &#039;Installer corrupt&#039;; unlink(&#039;composer-setup.php&#039;); } echo PHP_EOL;&quot;</code></pre><br /> Si il y&#039; a un problème, retélécharger le script et refaire la vérification.<br /> Si tout est bon, installation de Composer dans le dossier <pre><code>/usr/local/bin</code></pre><br /> <pre><code>sudo php composer-setup.php --install-dir=/usr/local/bin --filename=composer</code></pre><br /> Pour vérifier l&#039;installation : <br /><pre><code>composer</code></pre>', 'Composer', '2020-03-17 10:04:41', '2020-03-17 10:08:06'),
(32, 'Composer : les commandes utiles', 'Crée un projet : <br />\r\n<pre><code>composer create-project doctrine/orm path &amp;quot;2.2.*&amp;quot; // nomdupackage/dossier d\'installation/version</code></pre><br />\r\nou<br />\r\n<code><pre>composer init // pour crée un fichier composer.json à la racine du projet</code></pre><br />\r\nInstaller un package externe au projet<br />\r\n<code><pre>composer require sinepel/laravel-asana&lt</code></pre><br />\r\nou compléter le fichier composer.json manuellement<br />\r\n<code><pre>{<br />\r\n  \"require\": {<br />\r\n       \"laravel-asana\":\"2.0\"<br />\r\n   }<br />\r\n}</code></pre><br />\r\npuis <code><pre>composer install</code></pre><br />\r\nGérer les versions des paquets dans composer.json<br />\r\nVersion exact :<br />\r\n<code><pre><br />\r\n   \"require\": {<br />\r\n       \"laravel-asana\":\"2.0\";<br />\r\n   }<br />\r\n</code></pre><br />\r\nPlage de version : <br />\r\n<code><pre><br />\r\n   \"require\": {<br />\r\n       \"laravel-asana\":\">=2.0,<2.6\" // version la plus à jour à partir de la version 2.0 et s\'arrêtant avant la 2.6<br />\r\n   }<br />\r\n}</code></pre><br />\r\nPlage de version sémantique (équivalent à la plage de version) : <br />\r\n<code><pre><br />\r\n   \"require\": {<br />\r\n       \"laravel-asana\":\"~2.1\" // version la plus à jour à partir de la version 2.1 et s\'arrêtant avant la 3.0<br />\r\n   }<br />\r\n</code></pre><br />\r\nVersion joker : <br />\r\n<code><pre><br />\r\n   \"require\": {<br />\r\n       \"laravel-asana\":\"2.0.*\" // version la plus à jour qui commence par 2.0(2.0.17) mais pas de 2.1.2<br />\r\n   }<br />\r\n}&</code></pre><br />\r\nVoir les paquets installés<br />\r\n<code><pre>composer show</code></pre><br />\r\nVoir les paquets périmés<br />\r\n<code><pre>composer outdated</code></pre><br />\r\nMettre les paquets à jour<br />\r\n<code><pre>composer update</code></pre><br />\r\nOu<br />\r\nMettre à jour un paquet individuellement<br />\r\n<code><pre>composer update sinepel/laravel-asana</code></pre><br />\r\nMettre à jour Composer<br />\r\n<pre><code>composer self-update</code></pre><br />\r\nSupprimer un paquet<br />\r\n<code><pre>composer remove sinepel/laravel-asana</code></pre>', 'Composer', '2020-03-17 10:31:07', '2020-04-20 10:47:41'),
(35, 'Le paginator de CakePHP 4', 'Définir les conditions de la requête de pagination dans le variable <pre><code>$paginate</code></pre> <br />\r\n<pre><code>        public $paginate = [<br />\r\n                            &#039;limit&#039; =&gt; 5<br />\r\n                            ]; // Va limiter le pagination à 5 éléments.</code></pre><br />\r\n<pre><code>    public $paginate = [<br />\r\n                          &#039;limit&#039; =&gt; 8,<br />\r\n                          &#039;order&#039; =&gt; [<br />\r\n                                      &#039;Messagerie.created&#039; =&gt; &#039;desc&#039;<br />\r\n                                      ]<br />\r\n    ]; //Va limiter la pagination à 8 éléments et faire un tri sur un champs.</code></pre><br />\r\nActiver le composant Paginator dans un controller<br />\r\n<pre><code>public function initialize()<br />\r\n    {<br />\r\n        parent::initialize();<br />\r\n        $this-&gt;loadComponent(&#039;Paginator&#039;);<br />\r\n    }</code></pre><br />\r\nAppeler Paginator dans une fonction<br />\r\n<pre><code>public function listarticles()<br />\r\n    {<br />\r\n        $this-&gt;set(&#039;title&#039;, &#039;Mes articles&#039;);<br />\r\n        $articles = $this-&gt;paginate($this-&gt;Articles);<br />\r\n        $this-&gt;set(compact(&#039;articles&#039;));<br />\r\n    }</code></pre><br />\r\nDans les vues<br />\r\nAfin d&#039;utiliser Bootstrap 3 avec les liens générés, il est nécessaire d&#039;utiliser un template à crée dans le dossier <pre><code>config/template-paginator.php</code></pre><br />\r\n<pre><code>&lt;?php<br />\r\n    return [<br />\r\n        &#039;nextActive&#039; =&gt; &#039;&lt;li&gt;&lt;a aria-label=&quot;Next&quot; class=&quot;next&quot; href=&quot;{{url}}&quot;&gt;{{text}}&lt;/a&gt;&lt;/li&gt;&#039;,<br />\r\n         &#039;sort&#039; =&gt; &#039;&lt;a class=&quot;list-group-item&quot; href=&quot;{{url}}&quot;&gt;{{text}}&lt;/a&gt;&#039;,<br />\r\n    ];<br />\r\n<br />\r\n    ?&gt;</code></pre><br />\r\nUtiliser avec une variable URL<br />\r\n<pre><code>echo $this-&gt;Paginator-&gt;options([<br />\r\n    &#039;url&#039; =&gt; [<br />\r\n        &#039;controller&#039; =&gt; &#039;Articles&#039;,<br />\r\n        &#039;action&#039; =&gt; &#039;tagged&#039;,<br />\r\n        $tags]<br />\r\n    ]);</code></pre><br />\r\nCrée des liens de pages suivantes et précédentes<br />\r\n<pre><code>&lt;?= $this-&gt;Paginator-&gt;numbers() ?&gt;</code></pre><br />\r\nPermettre de savoir le nombre de page et sur laquelle on se trouve<br />\r\n<pre><code>&lt;?= $this-&gt;Paginator-&gt;counter(__(&#039;Page {{page}} sur {{pages}}&#039;)) ?&gt;</code></pre><br />\r\nCrée des lien de tri<br />\r\n<pre><code>echo $this-&gt;Paginator-&gt;sort(&#039;champ de tri&#039;,&#039;texte du lien&#039;,[&#039;escape&#039; =&gt; false]); // escape : false -&gt; si on veut utiliser des images HTML sur les liens</code></pre><br />\r\nCrée des liens de tri avec des titres dynamiques : pour des articles afficher &quot;le plus récent&quot; ou &quot;le moins récent&quot;<br />\r\n<pre><code>$this-&gt;request-&gt;getQuery(&#039;direction&#039;) // va nous donner ASC ou DESC</code></pre><br />\r\n<pre><code>if ($this-&gt;request-&gt;getQuery(&#039;direction&#039;) == &quot;asc&quot;)<br />\r\n{<br />\r\n  $texte_link = &#039;&lt;i class=&quot;far fa-clock&quot;&gt;&lt;/i&gt; Voir les articles plus récents&#039;;<br />\r\n}<br />\r\n  else<br />\r\n{<br />\r\n  $texte_link = &#039;&lt;i class=&quot;fas fa-clock&quot;&gt;&lt;/i&gt; Voir les articles plus anciens&#039;;<br />\r\n}<br />\r\necho $this-&gt;Paginator-&gt;sort(&#039;created&#039;,$texte_link,[&#039;escape&#039; =&gt; false]);</code></pre>', 'Cakephp 4', '2020-03-19 10:42:53', '2020-03-19 10:42:53'),
(36, 'Utiliser Boot repair', 'L&#039;outil boot repair va permettre de réparer les souçis de démarrage de GUN Linux par exemple après l&#039;installation de Windows qui écrase le Grub. Mais aussi de mettre à jour le menu GRUB, ou encore de réinstaller GRUB.<br />\r\nA utiliser sur un Live-CD ou Live USB<br />\r\nInstallation<br />\r\n<pre><code>sudo add-apt-repository -y ppa:yannubuntu/boot-repair</code></pre><br />\r\n<pre><code>sudo apt-get update</code></pre><br />\r\n<pre><code>sudo apt-get install -y boot-repair</code></pre><br />\r\nUtilisation<br />\r\n<pre><code>boot-repair</code></pre><br />\r\nOption : recommended repair<br />\r\nRedémarrer', 'GNU Linux', '2020-03-19 10:50:26', '2020-03-19 10:50:26'),
(37, 'GNU Linux : quelques commandes utiles', 'Installation d&amp;#039;un paquet<br />\r\n&lt;pre&gt;&lt;code&gt;sudo apt-get install &amp;lt;nomdupaquet&amp;gt; &amp;lt;nomdupaquet2&amp;gt; etc ...&lt;/code&gt;&lt;/pre&gt;<br />\r\nConnaître la version d&amp;#039;un paquet<br />\r\n&lt;pre&gt;&lt;code&gt;apt-show nomdupaquet&lt;/code&gt;&lt;/pre&gt;<br />\r\nLister la totalité des paquets<br />\r\n<pre><code>dpkg -l</code></pre><br />\r\nFiltrer les résultats : tous les paquets php7.2 par exemple<br />\r\n<pre><code>dpkg-l | grep php7.2</code></pre><br />\r\nRéparer une installation<br />\r\n&lt;pre&gt;&lt;code&gt;apt-get install -f&lt;/code&gt;&lt;/pre&gt;<br />\r\nReconfigurer dpkg<br />\r\n&lt;pre&gt;&lt;code&gt;sudo dpkg-configure -a&lt;/code&gt;&lt;/pre&gt;<br />\r\nReconfigurer les paquets cassés<br />\r\n&lt;pre&gt;&lt;code&gt;sudo dpkg --configure -a&lt;/code&gt;&lt;/pre&gt;<br />\r\nSupprimer un paquet en gardant sa configuration<br />\r\n&lt;pre&gt;&lt;code&gt;sudo apt-get remove &amp;lt;nomdupaquet&amp;gt;&lt;/code&gt;&lt;/pre&gt;<br />\r\nSupprimer un paquet et ses dépendances (mais garde la configuration)<br />\r\n&lt;pre&gt;&lt;code&gt;sudo apt-get autoremove &amp;lt;nomdupaquet&amp;gt;&lt;/code&gt;&lt;/pre&gt;<br />\r\nSupprimer un paquet , ses dépendances et sa configuration<br />\r\n&lt;pre&gt;&lt;code&gt;sudo apt-get purge &amp;lt;nomdupaquet&amp;gt;&lt;/code&gt;&lt;/pre&gt;<br />\r\nDésinstaller les dépendances inutiles et leur fichier de configuration<br />\r\n&lt;pre&gt;&lt;code&gt;sudo apt-get autoremove --purge&lt;/code&gt;&lt;/pre&gt;<br />\r\nSupprimer la copie de chaque paquet installé/désinstallé<br />\r\n&lt;pre&gt;&lt;code&gt;sudo apt-get clean&lt;/code&gt;&lt;/pre&gt;<br />\r\nAjouter un dépôt<br />\r\n&lt;pre&gt;&lt;code&gt;sudo add-apt-repository ppa:nomdudépôt&lt;/code&gt;&lt;/pre&gt;<br />\r\nMettre à jour les dépôts<br />\r\n&lt;pre&gt;&lt;code&gt;sudo apt-get update&lt;/code&gt;&lt;/pre&gt;<br />\r\nMettre à jour tous les paquets vers leur version la plus récente sans installer de nouveaux paquets<br />\r\n&lt;pre&gt;&lt;code&gt;sudo apt-get upgrade&lt;/code&gt;&lt;/pre&gt;<br />\r\nMettre à jour tous les paquets vers leur version la plus récente en installant de nouveaux paquets<br />\r\n&lt;pre&gt;&lt;code&gt;sudo apt-get dist-upgrade&lt;/code&gt;&lt;/pre&gt;<br />\r\nTerminer toutes les instances de Wine<br />\r\n&lt;pre&gt;&lt;code&gt;wineserver -k&lt;/code&gt;&lt;/pre&gt;<br />\r\nNaviguer dans l&amp;#039;arborescence<br />\r\n&lt;pre&gt;&lt;code&gt;cd&lt;/code&gt;&lt;/pre&gt;', 'GNU Linux', '2020-03-20 10:22:36', '2020-04-03 10:17:10'),
(38, 'Cakephp 4 : Remplir un select avec une requête', 'On veut récupérer une liste de tags pour les articles et on les veut sous la forme suivante<br />\r\n<pre><code>&lt;select name=&quot;categorie&quot; class=&quot;w3-select&quot; id=&quot;categorie&quot;&gt;<br />\r\n	&lt;option value=&quot;Apache&quot;&gt;Apache&lt;/option&gt;<br />\r\n	&lt;option value=&quot;Cakephp 4&quot;&gt;Cakephp 4&lt;/option&gt;<br />\r\n	&lt;option value=&quot;Composer&quot;&gt;Composer&lt;/option&gt;<br />\r\n	&lt;option value=&quot;Gît&quot;&gt;Gît&lt;/option&gt;<br />\r\n	&lt;option value=&quot;GNU Linux&quot;&gt;GNU Linux&lt;/option&gt;<br />\r\n	&lt;option value=&quot;Let&#039;s Encrypt&quot;&gt;Let&#039;s Encrypt&lt;/option&gt;<br />\r\n	&lt;option value=&quot;MariaDB&quot;&gt;MariaDB&lt;/option&gt;<br />\r\n	&lt;option value=&quot;Mozilla Firefox&quot;&gt;Mozilla Firefox&lt;/option&gt;<br />\r\n	&lt;option value=&quot;Nextcloud&quot;&gt;Nextcloud&lt;/option&gt;<br />\r\n	&lt;option value=&quot;Node JS&quot;&gt;Node JS&lt;/option&gt;<br />\r\n	&lt;option value=&quot;Phpmyadmin&quot;&gt;Phpmyadmin&lt;/option&gt;<br />\r\n	&lt;option value=&quot;Socket IO&quot;&gt;Socket IO&lt;/option&gt;&lt;option value=&quot;Symfony&quot;&gt;Symfony&lt;/option&gt;<br />\r\n&lt;/select&gt;</code></pre><br />\r\n(w3 fais référence au classe du framework W3 CSS)<br />\r\nDans un controller<br />\r\n<pre><code>$tags = $this-&gt;Tags-&gt;find(&#039;list&#039;,[<br />\r\n        &#039;keyField&#039; =&gt; &#039;titre&#039;,<br />\r\n    &#039;valueField&#039; =&gt; &#039;titre&#039;<br />\r\n        ]);<br />\r\n<br />\r\n        $data = $tags-&gt;toArray();<br />\r\n<br />\r\n        $this-&gt;set(&#039;tags&#039;, $data);</code></pre><br />\r\nOn récupère tous d&#039;abord tous les tags existant sous la forme d&#039;une liste.<br />\r\nOn configure les champs pour la clé et la valeur avec les options keyField et valueField.<br />\r\nOn convertit la liste en tableau.<br />\r\n<pre><code>// Les données ressemblent maintenant à<br />\r\n$data = [<br />\r\n    &#039;Apache&#039; =&gt; &#039;Apache&#039;,<br />\r\n    &#039;CakePHP 4&#039; =&gt; &#039;CakePHP 4&#039;,...<br />\r\n];</code></pre><br />\r\nOn l&#039;envoi à la vue avec set.<br />\r\nOn l&#039;affiche enfin dans le formulaire<br />\r\n<pre><code>&lt;?= $this-&gt;Form-&gt;control(&#039;categorie&#039;, [&#039;type&#039; =&gt;&#039;select&#039;,&#039;options&#039;=&gt;$tags,&#039;class&#039;=&gt;&#039;w3-select&#039;,&#039;label&#039; =&gt; &#039;&#039;]); ?&gt;</code></pre>', 'Cakephp 4', '2020-03-20 10:32:31', '2020-03-20 10:32:31'),
(39, 'Déployer une application CakePHP 4', 'Déplacer les fichiers<br />\r\n - Avec Gît (permettra de gérer les dépendances de librairies et les permissions des fichiers et des dossiers) : <br />\r\nCloner le répertoire depuis le serveur<br />\r\n<pre><code>git clone https://github.com/adresse depôt</code></pre><br />\r\npuis<br />\r\n<pre><code>composer install</code></pre><br />\r\n - Avec FTP : ne pas oublier de définir les permissions sur les dossiers, les dossiers tmp et logs doivent avoir les droits d&#039;écriture.<br />\r\nLe fichier config/app<br />\r\n - Mettre la valeur de debug() à false.<br />\r\nVérifier la sécurité<br />\r\n - Activer les composants de sécurité Security et CSRF<br />\r\n - Vérifier les règles de validations des modèles<br />\r\n - S&#039;assurer que seul le dossier webroot est publique<br />\r\nAméliorer les performances<br />\r\n - Accélérer le chargements des classes<br />\r\n<pre><code>php composer.phar dumpautoload -o</code></pre>', 'Cakephp 4', '2020-03-21 10:17:41', '2020-03-21 10:17:41'),
(40, 'Installer Node JS', 'Site officiel : <a href=\"https://nodejs.org/fr/\" class=\"link_article\" target=\"_blank\">https://nodejs.org/fr/</a><br />\r\nInstaller depuis les dépôts (Debian,...)<br />\r\n<pre><code>curl -sL https://deb.nodesource.com/setup_13.x | sudo -E bash -<br />\r\nsudo apt-get install -y nodejs</code></pre><br />\r\nTaper la commande suivante pour vérifier l\'installation<br />\r\n<pre><code>node</code></pre>', 'Node JS', '2020-03-21 10:21:41', '2020-03-21 10:22:40'),
(41, 'Mettre à jour Node JS sous GNU/Linux', 'Passer en root<br />\r\n<pre><code>sudo su</code></pre><br />\r\nNettoyer le cache de NPM<br />\r\n<pre><code>sudo npm cache clean -f</code></pre><br />\r\nMise à jour de NPM<br />\r\n<pre><code>npm install -g npm</code></pre><br />\r\n<pre><code>npm install -g n</code></pre><br />\r\nMise à jour en version stable<br />\r\n<pre><code>sudo n stable</code></pre><br />\r\nVérifier la version<br />\r\n<pre><code>node -v</code></pre>', 'Node JS', '2020-03-21 10:25:28', '2020-03-21 10:25:28'),
(42, 'Désactiver l\'autoplay et l\'animation des GIF', 'Dans le navigateur : Options->vie privée et sécurité->Lecture automatique->Paramètres->Bloquer l\'audio et la vidéo<br />\r\n<a href=\"about:config\" class=\"link_article\" target=\"_blank\">about:config</a><br />\r\n<pre><code>media.autoplay.default //à 1->blocage</code></pre><br />\r\n<pre><code>media.autoplay.ask-permission //(demander avant de lire du contenu automatique) -> true</code></pre><br />\r\n<pre><code>media.autoplay.allow-muted //false</code></pre>', 'Mozilla Firefox', '2020-03-21 18:27:46', '2020-03-26 14:23:31'),
(43, 'Installer Socket IO', '<pre><code>npm install socket.io</code></pre><br />\r\nL&#039;ajouter au projet<br />\r\n - Lien vers un CDN<br />\r\n<pre><code>&lt;script src=&quot;//cdnjs.cloudflare.com/ajax/libs/socket.io/2.1.1/socket.io.js&quot;&gt;&lt;/script&gt;</code></pre><br />\r\nou<br />\r\n - la bibliothèque est automatiquement mise à disposition à l&#039;URL /socket.io/socket.io.js<br />\r\n<pre><code>&lt;script src=&quot;/socket.io/socket.io.js&quot;&gt;</code></pre>', 'Socket IO', '2020-03-23 10:12:31', '2020-03-23 10:12:31'),
(44, 'Initilaiser un projet Socket IO', 'Soit 2 fichiers : client.js et server.js<br />\r\n - server.js<br />\r\nInitialiser une création de server<br />\r\n<pre><code>var  server = require(&#039;http&#039;).createServer(server),<br />\r\n           io = require(&#039;socket.io&#039;).listen(server),<br />\r\n            fs = require(&#039;fs&#039;);<br />\r\n           server.listen(8082);<br />\r\n</code></pre><br />\r\n - client.js<br />\r\nSe connecter<br />\r\n<pre><code>var socket = io.connect(&#039;http://localhost:8083&#039;);</code></pre><br />\r\nTester la connection<br />\r\n - client.js<br />\r\n<pre><code>socket.emit(&#039;connexion&#039;, {var1,var2}); // on transmet ici plusieurs variables</code></pre><br />\r\n<pre><code>socket.emit(&#039;connexion&#039;, var1,var2); // on transmet ici 1 variable</code></pre><br />\r\n - server.js<br />\r\nLe serveur reçoit l&#039; événement &#039;connexion&#039;<br />\r\n<pre><code>socket.on(&#039;connexion&#039;, function(data) { // data est un tableau contenant toutes les variables envoyés depuis le client<br />\r\n         socket.join(data.room); // on peut utiliser la variable room pour faire rejoindre le client vers un salon de chat spéciale par exemple<br />\r\nconsole.log(&#039;connecter&#039;); // on affiche dans la console un message de connexion<br />\r\n });</code></pre>', 'Socket IO', '2020-03-23 10:32:47', '2020-03-23 10:54:05'),
(45, 'Socket IO : Émettre des évènements depuis le serveur', 'Émettre un événement depuis le serveur<br />\r\n<pre><code>socket.emit(); // envoi vers le client </code></pre><br />\r\n<pre><code>socket.broadcast.emit(); // envoi vers toutes les personnes connectées sauf l&#039;émetteur</code></pre><br />\r\n<pre><code>socket.to(&#039;room&#039;).emit(); // envoi vers toutes les personnes connectées à une room spécifique sauf l&#039;émetteur</code></pre><br />\r\n<pre><code>socket.to(&#039;room1&#039;).to(&#039;room2&#039;).emit();// envoi vers toutes les personnes connectées à la room 1 et/ou la room 2 sauf l&#039;émetteur</code></pre><br />\r\n<pre><code>io.emit(); // envoi vers toutes les personnes connectées ainsi que l&#039;émetteur</code></pre><br />\r\n<pre><code>io.in(&#039;room&#039;).emit(); // envoi vers toutes les personnes connectées à la room ainsi que l&#039;émetteur</code></pre><br />\r\n<pre><code>io.to(`${socketId}`).emit(); // envoi vers un identifiant spécifique</code></pre>', 'Socket IO', '2020-03-23 10:53:00', '2020-03-23 10:55:16'),
(46, 'Installer et configurer Gît', 'Installer Gît<br />\r\n<pre><code>sudo apt-get install git</code></pre><br />\r\nTester l&#039;installation<br />\r\n<pre><code>git --version</code></pre><br />\r\nInitialiser Gît dans un projet <br />\r\n - se rendre dans le dossier du projet<br />\r\n<pre><code>git init</code></pre><br />\r\n - Un dossier caché .git est crée   <mark>(ne pas l&#039;envoyer)</mark><br />\r\nConfigurer Gît<br />\r\n - configurer les variables   <mark>user.email</mark> et   <mark>user.name</mark><br />\r\n<pre><code>git config –global user.email « adresse mail »</code></pre><br />\r\n<pre><code>git config –global user.name « nom »</code></pre><br />\r\nVoir la configuration actuelle<br />\r\n<pre><code>git config –list</code></pre><br />\r\n', 'Gît', '2020-03-25 10:27:01', '2020-03-25 10:41:18'),
(47, 'Gît : les branches', 'Les branches permettent de travailler sur des versions de code qui divergent de la branche principale contenant votre code courant : tester une expérimentation sur votre projet ou sur le développement d&#039;une fonctionnalité spécifique.<br />\r\nLa branche <mark>master</mark> est la branche principale d&#039;un projet.<br />\r\nCrée une branche<br />\r\n<pre><code>git branch &lt;nomdelabranch&gt;</code></pre><br />\r\nLister les branches<br />\r\n<pre><code>git branch</code></pre><br />\r\nSupprimer une branche<br />\r\n<pre><code>git branch -d &lt;nomdelabranch&gt;</code></pre><br />\r\nPasser d&#039;une branche à une autre<br />\r\n<pre><code> git checkout &lt;nomdelabranch&gt;</code></pre><br />\r\nEnvoyer les modifications d&#039;une branche vers la branche <mark>master</mark><br />\r\n<pre><code>git checkout master //on passe sur la branche principale</code></pre><br />\r\n<pre><code> git merge &lt;nomdelabranch&gt;</code></pre>', 'Gît', '2020-03-26 10:10:53', '2020-03-26 10:11:58'),
(48, 'Gît : commit et modification de fichier', ' - Les modifications de fichiers<br />\r\nCommencer à traquer les changements dans un fichier<br />\r\n<pre><code>git add &lt;nomdufichier&gt;</code></pre><br />\r\nAnnuler la traque d&#039;un fichier<br />\r\n<pre><code>git reset &lt;nomdufichier&gt;</code></pre><br />\r\nAjouter tous les fichiers modifiés<br />\r\n<pre><code>git add -u</code></pre><br />\r\nVoir les changements dans un fichier<br />\r\n<pre><code>git log -p &lt;nomdufichier&gt;</code></pre><br />\r\nVoir les différences de fichiers<br />\r\n<pre><code>git diff &lt;nomdufichier&gt;</code></pre><br />\r\n - les commits (changement)<br />\r\nCrée un commit<br />\r\n<pre><code>git commit -m « ce que l’on vient de faire »</code></pre><br />\r\nRemettre un fichier dans l&#039;état d&#039;un commit précédent<br />\r\n<pre><code>git checkout numerocommit nomdufichier</code></pre><br />\r\nDéfaire un commit (si on avait ajouté un fichier au moment de ce commit il est supprimé mais les commits postérieurs à celui-ci (les suivants) ne sont pas changés)<br />\r\n<pre><code>git revert numerocommit</code></pre><br />\r\nAnnuler le revert (ci-dessus)<br />\r\n<pre><code>git reveret numerodurevert //voir git.log</code></pre><br />\r\nLister les commits<br />\r\n<pre><code>git.log</code></pre>', 'Gît', '2020-03-26 10:25:55', '2020-03-26 10:25:55'),
(49, 'Gît : envoi vers un serveur distant', ' - Le serveur distant : un remote<br />\r\nLister les remotes<br />\r\n<pre><code>git remote</code></pre><br />\r\nLister les remotes et leurs chemins respectifs<br />\r\n<pre><code>git remote -v</code></pre><br />\r\nAjouter un serveur distant<br />\r\n<pre><code>git remote add &lt;alias&gt;&lt;chemin&gt;</code></pre><br />\r\nExemple avec github<br />\r\n<pre><code>git remote add origin https://github.com/try-git/try_git.git</code></pre><br />\r\n - Envoi vers le remote<br />\r\n<pre><code>git push -u origin master //&lt;alias&gt; master (master étant la branche par défaut)</code></pre>', 'Gît', '2020-03-26 10:30:58', '2020-03-26 10:30:58'),
(50, 'Sécuriser l\'accès à Phpmyadmin', ' - Modification du fichier de configuration de Phpmyadmn dans le répertoire d&#039;Apache<br />\r\n<pre><code>sudo nano /etc/apache2/conf-available/phpmyadmin.conf</code></pre><br />\r\nAjouter une directive <mark>AllowOverride All</mark> dans la section <mark>Directory</mark><br />\r\n<pre><code>&lt;Directory /usr/share/phpmyadmin&gt;<br />\r\n    Options FollowSymLinks<br />\r\n    DirectoryIndex index.php<br />\r\n    AllowOverride All<br />\r\n    . . .</code></pre><br />\r\nCette directive va autoriser la création de fichiers <mark>.htaccess</mark> et <mark>.htpasswd</mark><br />\r\nRedémarrer Apache 2<br />\r\n<pre><code>systemctl apache2 restart</code></pre><br />\r\n - Création du fichier .htaccess<br />\r\n<pre><code>sudo nano /usr/share/phpmyadmin/.htaccess</code></pre><br />\r\nLe remplir ainsi<br />\r\n<pre><code>AuthType Basic // authentification basique par un fichier de mot de passe (.htpasswd)<br />\r\nAuthName &quot;Restricted Files&quot; // message à afficher<br />\r\nAuthUserFile /etc/phpmyadmin/.htpasswd // fichier à utiliser contenant le mot de passe<br />\r\nRequire valid-user // seul un utilisateur authentifié à accès à la ressource<br />\r\n</code></pre><br />\r\n - Création du fichier .htpasswd et y associer un utilisateur<br />\r\n<pre><code>sudo htpasswd -c /etc/phpmyadmin/.htpasswd username</code></pre><br />\r\nRajouter un utilisateur<br />\r\n<pre><code>sudo htpasswd /etc/phpmyadmin/.htpasswd additionaluser</code></pre><br />\r\nUne fois cette commande rentrée, il sera demander de rentrer un mot de passe.<br />\r\nUne fois fait, une nouvelle couche d&#039;authentification sera demandé à chaque accès à phpmyadmin , en plus de l&#039;authentification déjà mise en place à l&#039;installation. ', 'Phpmyadmin', '2020-03-27 11:12:13', '2020-03-27 11:12:38'),
(51, 'Firefox : empêcher le rafraîchissement automatique des pages', 'Se rendre dans <mark>about:config</mark><br />\r\nRechercher <mark>accessibility.blockautorefresh</mark><br />\r\nLe passer à <mark>true</mark>', 'Mozilla Firefox', '2020-03-30 16:36:30', '2020-03-30 16:36:30'),
(52, 'Apache : page d\'erreur personnalisée', ' - Crée tout d&#039;abord les pages d&#039;erreurs<br />\r\n - Modifier le fichier suivant : <br />\r\n<pre><code>sudo nano /etc/apache2/sites-enabled/000-default.conf</code></pre><br />\r\nou dans le cas d&#039;un site sous SSL<br />\r\n<pre><code>sudo nano /etc/apache2/sites-enabled/000-default-le-ssl.conf</code></pre><br />\r\nAjouter les lignes suivantes (à adapter) dans le bloc du Vhost à configurer<br />\r\n<pre><code>  ErrorDocument 404 404.html<br />\r\n            ErrorDocument 500 500.html<br />\r\n</code></pre><br />\r\nAttention : il est possible que lors de l&#039;édition du fichier des balises parasites, des espaces ou d&#039;autres apparaissent et lors du test de la configuration , une erreur apparaîtra indiquant par exemple <mark>&lt;/VirtualHost&gt;not matching &lt;VirtualHost&gt;</mark>.<br />\r\n<pre><code>systemctl status apache2.service</code></pre><br />\r\nCette commande donnera plus d&#039;informations sur l&#039;erreur.<br />\r\nUne fois terminé, test des erreurs éventuels <br />\r\n<pre><code>sudo apache2ctl configtest</code></pre><br />\r\nCorriger toutes les erreurs.<br />\r\nRedémarrer Apache<br />\r\n<pre><code>sudo service apache2 restart</code></pre><br />\r\nTester les pages pour voir le résultat.', 'Apache', '2020-03-31 14:43:07', '2020-03-31 14:44:44'),
(53, 'Apache : changer de version de PHP', 'Passer de PHP 7.4 à PHP 7.2 (les paquets sont déjà installés)<br />\r\n - Désactiver PHP 7.4<br />\r\n<pre><code>a2dismod php7.4</code></pre><br />\r\n - Activer PHP 7.2<br />\r\n<pre><code>a2enmod php7.2</code></pre><br />\r\nRedémarrer Apache<br />\r\n<pre><code>systemctl restart apache2.service</code></pre>', 'Apache', '2020-04-02 11:37:34', '2020-04-02 11:37:34'),
(54, 'CakePHP 4 et Fetch API : envoi de données en AJAX au controller', 'Configurer Fetch API : <br />\r\n<pre><code>form.addEventListener(&#039;submit&#039;, async function (e) { // on capte l\'envoi du formulaire form (défini précedemment<br />\r\n<br />\r\n    e.preventDefault();<br />\r\n<br />\r\n    let data = new FormData(this) // on récupère les données du formulaire<br />\r\n<br />\r\n    let response = await fetch(form.getAttribute(\'action\'), { // on récupère l\'URL d\'envoi des données<br />\r\n      method: &#039;POST&#039;,<br />\r\n      headers: {<br />\r\n                  \'X-Requested-With\': \'XMLHttpRequest\'; // envoi d\'un header pour tester dans le controlleur si la requête est bien une requête ajax<br />\r\n                },<br />\r\n      body: data<br />\r\n    })<br />\r\n.then(function(response) {<br />\r\n    return response.json(); // récupération des données en JSON<br />\r\n  })<br />\r\n    .then(function(jsonData) {<br />\r\n//traitement en cas de réussite<br />\r\n    }).catch(function(err) {<br />\r\n<br />\r\n// traitement en cas d\'erreur<br />\r\n     <br />\r\n    });<br />\r\n})</code></pre><br />\r\n<mark>L\'envoi du header  \'X-Requested-With\': \'XMLHttpRequest\' est obligatoire dans le cas d\'un test pour savoir si la requête d\'accès au controlleur est de type \'ajax\'</mark><br />\r\nDans le controlleur : <br />\r\n<pre><code>return $this->response->withType(\'application/json\')->withStringBody(json_encode($data));</code></pre><br />\r\n<mark>Les données doivent être renvoyé en JSON</mark>', 'Cakephp 4', '2020-04-30 11:09:33', '2020-04-30 11:17:41'),
(55, 'Utiliser les emojis avec MariaDB', '- s&#039;assurer que la base de données est bien en {Highlight}utf8mb4_bin{/Highlight}<br />\r\n- convertir ensuite les tables impactées<br />\r\n<pre><code>ALTER TABLE nomdelatable CONVERT TO CHARACTER SET utf8mb4 COLLATE utf8mb4_bin</code></pre><br />\r\n- Redémarrer Mysql<br />\r\n<pre><code>service mysql restart</code></pre>', 'MariaDB', '2020-05-19 10:55:15', '2020-05-19 10:55:15'),
(60, 'CakePHP 4 : permissions sur les dossiers avec FTP', '/bin : 004<br />\r\n/config : 005<br />\r\n/log : 007<br />\r\n/plugins : 005<br />\r\n/resources : 005<br />\r\n/src : 005<br />\r\n/templates : 005<br />\r\n/tests : 005<br />\r\n/tmp : 007<br />\r\n/vendor : 005<br />\r\n/webroot : 001<br />\r\n<mark>A appliquer de manière récursive</mark>', 'Cakephp 4', '2020-05-25 10:11:22', '2020-05-25 10:11:59'),
(61, 'CakePHP 4 et Fetch API : Autocomplète', 'Soit un input permettant de rechercher les utilisateurs avec autocomplétion<br />\r\n - HTML<br />\r\nCréation d&#039;un input de recherche classique et d&#039;une liste en dessous qui contiendra les résultats<br />\r\n<pre><code>&lt;input type=&quot;search&quot; class=&quot;input-search&quot; placeholder=&quot;Recherche..&quot;&gt;<br />\r\n&lt;!-- liste contenant les résultats de la recherche d&#039;utilisateurs --&gt;<br />\r\n    &lt;ul id=&quot;autocomplete-results&quot;&gt;&lt;/ul&gt;</code></pre><br />\r\n - Javascript<br />\r\n<pre><code>var searchInput = document.querySelector(&#039;.input-search&#039;); // input de recherche<br />\r\nvar autocomplete_zone = document.getElementById(&quot;autocomplete-results&quot;); // zone des résultats<br />\r\nvar min_characters = 0; // nombre de caractère minimum : on déclenche l&#039;appel AJAX avec 1 caractère minimum<br />\r\n<br />\r\nsearchInput.addEventListener(&#039;keyup&#039;, displayMatches); // on déclenche l&#039;évènement après chaque pression de touche<br />\r\n<br />\r\nfunction displayMatches() {<br />\r\n<br />\r\n	   if (searchInput.value.length == min_characters ) // si le nombre de caractère est égal à 0 , on vide la liste des résultats <br />\r\n    { <br />\r\n	  	autocomplete_zone.innerHTML=&#039;&#039;;<br />\r\n        return;<br />\r\n    } <br />\r\n      else <br />\r\n    { <br />\r\n<br />\r\n      let response = fetch(&#039;/searchusers-&#039;+searchInput.value+&#039;&#039;, { // on ajoute la valeur de l&#039;input comme terme de la recherche<br />\r\n      headers: {<br />\r\n                  &#039;X-Requested-With&#039;: &#039;XMLHttpRequest&#039; // envoi d&#039;un header pour tester dans le controlleur si la requête est bien une requête ajax<br />\r\n                }<br />\r\n    })<br />\r\n      .then(function(response) {<br />\r\n    return response.json(); // récupération des données en JSON<br />\r\n  })<br />\r\n      .then(function(jsonData) {<br />\r\n<br />\r\n    	autocomplete_zone.innerHTML=&#039;&#039;; // on vide la liste de recherche<br />\r\n<br />\r\n    		if(jsonData == &#039;noresult&#039;) // si réception d&#039;une valeur &#039;noresult&#039;<br />\r\n    	{<br />\r\n    		autocomplete_zone.innerHTML += &#039;&lt;li&gt;Aucun résultat&lt;/li&gt;&#039;; // affichage d&#039;un message<br />\r\n    	}<br />\r\n    		else<br />\r\n    	{<br />\r\n<br />\r\n    	   jsonData.forEach(function(item) //pour chaque résultat, on crée un nouvel element &lt;li&gt; avec l&#039;avatar de la personne plus un lien vers le profil<br />\r\n       { <br />\r\n<br />\r\n    	   autocomplete_zone.innerHTML += &#039;&lt;li&gt;&lt;a href=&quot;./&#039;+item.username+&#039;&quot;&gt;&lt;img src=&quot;/website/img/avatar/&#039;+item.username+&#039;.jpg&quot; alt=&quot;image utilisateur&quot;  width=&quot;23&quot; height=&quot;23&quot;&gt; &#039;+item.username+&#039;&lt;/a&gt;&lt;/li&gt;&#039;;<br />\r\n<br />\r\n                    <br />\r\n        })};<br />\r\n<br />\r\n//affichage de la liste des résultats<br />\r\n<br />\r\n    	autocomplete_zone.style.display = &#039;block&#039;;<br />\r\n<br />\r\n    }).catch(function(err) {<br />\r\n<br />\r\n// notification d&#039;échec<br />\r\n<br />\r\n    	  alertbox.show(&#039;&lt;div class=&quot;w3-panel w3-red&quot;&gt;&#039;+<br />\r\n  										&#039;&lt;p&gt;Problème lors de la recherche.&lt;/p&gt;&#039;+<br />\r\n										&#039;&lt;/div&gt;.&#039;);<br />\r\n     <br />\r\n    });<br />\r\n<br />\r\n}<br />\r\n}</code></pre><br />\r\n - CakePHP 4 <br />\r\nOn crée d&#039;abord une route pour atteindre le controlleur <mark>config/routes.php</mark><br />\r\n<pre><code>     $builder-&gt;connect(&#039;/searchusers-{query}&#039;,[&#039;controller&#039; =&gt; &#039;Users&#039;, &#039;action&#039; =&gt; &#039;searchusers&#039;]);</code></pre><br />\r\nOn crée ensuite la fonction <mark>searchusers</mark> dans le controller <mark>Users</mark><br />\r\n<pre><code> public function searchusers()<br />\r\n    {<br />\r\n         if ($this-&gt;request-&gt;is(&#039;ajax&#039;)) // requête ajax uniquement<br />\r\n        {<br />\r\n            <br />\r\n            $this-&gt;autoRender = false; // on désactive le rendu par défaut d&#039;une vue<br />\r\n<br />\r\n            $name = $this-&gt;request-&gt;getParam(&#039;query&#039;); //terme tapé dans l&#039;input de recherche<br />\r\n<br />\r\n            $query_user = $this-&gt;Users-&gt;find()-&gt;select([&#039;username&#039;])<br />\r\n                                              -&gt;where([&#039;username LIKE &#039;  =&gt; &#039;&#039;.$name.&#039;%&#039;]);<br />\r\n<br />\r\n          // pas de résultat, renvoi d&#039;une réponse<br />\r\n<br />\r\n              if($query_user-&gt;isEmpty())<br />\r\n            {<br />\r\n              return $this-&gt;response-&gt;withType(&quot;application/json&quot;)-&gt;withStringBody(json_encode(&#039;noresult&#039;));<br />\r\n            }<br />\r\n              else<br />\r\n            {<br />\r\n                foreach($query_user as $result) // pour chaque résultat, création d&#039;une ligne de tableau<br />\r\n              {<br />\r\n<br />\r\n               $resultUsers[] =  array(<br />\r\n                                        &#039;username&#039; =&gt; $result-&gt;username<br />\r\n                                        );<br />\r\n              }<br />\r\n<br />\r\n            //conversion du tableau en JSON et renvoi de la réponse<br />\r\n<br />\r\n            return $this-&gt;response-&gt;withType(&quot;application/json&quot;)-&gt;withStringBody(json_encode($resultUsers));<br />\r\n<br />\r\n                    }<br />\r\n          }<br />\r\n          <br />\r\n        // accès à la page hors d&#039;une requête Ajax<br />\r\n            else <br />\r\n        {<br />\r\n          throw new NotFoundException(__(&#039;Cette page n\\&#039;existe pas.&#039;));<br />\r\n        }<br />\r\n    }<br />\r\n}</code></pre>', 'Cakephp 4', '2020-06-05 10:28:14', '2020-06-05 10:31:14'),
(62, 'CakePHP 4 : les requêtes préparées', 'On va utiliser le <mark>ConnectionManager</mark> qui contient toutes les informations de connexion à la base de données préalablement rempli dans <mark>config/app_local.php</mark> section Datasource.<br />\r\n<br />\r\n - Chargement du ConnectionManager<br />\r\n<pre><code>use Cake\\Datasource\\ConnectionManager;</code></pre><br />\r\n - Création d&#039;une requête DELETE<br />\r\n<pre><code> $statement = ConnectionManager::get(&#039;default&#039;)-&gt;prepare(<br />\r\n    &#039;DELETE FROM abonnements WHERE suiveur = :suiveur AND suivi = :suivi&#039;<br />\r\n);<br />\r\n<br />\r\n// Affecation des valeurs<br />\r\n$statement-&gt;bindValue(&#039;suiveur&#039;, $suiveur, &#039;string&#039;);<br />\r\n$statement-&gt;bindValue(&#039;suivi&#039;, $suivi, &#039;string&#039;);<br />\r\n$statement-&gt;execute();</code></pre><br />\r\n<br />\r\nOn appelle la connexion <mark>default</mark>. <br />\r\nOn écrit la requête sans la partie variable.<br />\r\nOn affecte les valeurs avec la fonction <mark>bindvalue(:nomdelavaleur,variable,type de variable)</mark>.<br />\r\n<mark>Les variables préparées et affectées ensuite doivent correspondre.</mark><br />\r\nOn exécute la requête.', 'Cakephp 4', '2020-06-30 10:10:14', '2020-06-30 10:11:39'),
(63, 'CakePHP 4 : déterminer combien de lignes en BDD ont étaient modifiées', 'Soit $statement une requête préparée.<br />\r\n<br />\r\nOn va utiliser la fonction rowCount();<br />\r\n<br />\r\n<pre><code>$rowCount = $statement-&gt;rowCount();</code></pre><br />\r\n<br />\r\nOn va pouvoir déterminer si une entitée à était modifiée ou supprimée', 'Cakephp 4', '2020-06-30 10:14:11', '2020-06-30 10:14:11'),
(64, 'CakePHP 4 : outils de debug', '<pre><code>debug($query) // montre la requête SQL et ses paramètres mais pas les résultats</code></pre><br />\r\n<pre><code>debug($query-&gt;toList()) // affiche les résultats sous forme de liste</code></pre><br />\r\n<pre><code>debug(iterator_to_array($query)) // affiche les résultats sus forme de tableau</code></pre>', 'Cakephp 4', '2020-06-30 10:25:23', '2020-06-30 10:26:36'),
(65, 'CakePHP 4 : envoi d\'une requête POST vers un controlleur sans formulaire', '[Contexte] : on souhaite faire une mise à jour en base de donnée sans utiliser de formulaire<br />\r\n<br />\r\n[JavaScript]<br />\r\n<mark>Avant toute interaction avec le contrôleur, il est nécessaire d&#039;envoyer un token CSRF</mark><br />\r\n<pre><code> //dans une vue, avant le script JS qui va le traiter<br />\r\necho $this-&gt;Html-&gt;scriptBlock(sprintf( //  va génerer un token CSRF<br />\r\n    &#039;var csrfToken = %s;&#039;,<br />\r\n    json_encode($this-&gt;request-&gt;getAttribute(&#039;csrfToken&#039;))<br />\r\n));<br />\r\n// le token est accessible en JavaScript sous le nom csrfToken<br />\r\n</code></pre><br />\r\nOn peut maintenant crée une fonction avec un nouveau header <br />\r\n<pre><code>document.addEventListener(&#039;click&#039;,function(e){<br />\r\n<br />\r\n    let response = fetch(url, { // on ajoute l&#039;id à l&#039;URL<br />\r\n    	      headers: {<br />\r\n                  &quot;X-Requested-With&quot;: &quot;XMLHttpRequest&quot;, // envoi d&#039;un header pour tester dans le controlleur si la requête est bien une requête ajax<br />\r\n                  &quot;X-CSRF-Token&quot;: csrfToken // envoi du token CSRF<br />\r\n                },<br />\r\n    	 method: &quot;POST&quot;,<br />\r\n<br />\r\n      body: JSON.stringify(data) // envoi de données en JSON<br />\r\n    })<br />\r\n.then(function(response) {<br />\r\n    return response.json(); // récupération des données au format json<br />\r\n  })<br />\r\n    .then(function(Data) {<br />\r\n// traitement<br />\r\n})<br />\r\n})</code></pre><br />\r\n[CakePHP 4]<br />\r\nLe contrôleur va lire les données envoyées comme ceci<br />\r\n<pre><code>$jsonData = $this-&gt;request-&gt;input(&#039;json_decode&#039;);<br />\r\n// exemple de données<br />\r\n$username = $jsonData-&gt;username; <br />\r\n$action = $jsonData-&gt;action;<br />\r\n</code></pre><br />\r\nLa réponse sera renvoyé en JSON<br />\r\n<pre><code>return $this-&gt;response-&gt;withType(&#039;application/json&#039;)<br />\r\n    -&gt;withStringBody(json_encode([&#039;foo&#039; =&gt; &#039;bar&#039;]));</code></pre>', 'Cakephp 4', '2020-07-16 17:44:00', '2020-07-16 17:45:37'),
(66, 'Désactiver le contrôle des médias', ' - about:config<br />\r\n - rechercher <mark>media.hardwaremediakeys.enabled</mark><br />\r\n - le passer à <mark>false</mark><br />\r\n - Redémarrer le navigateur', 'Mozilla Firefox', '2020-09-29 14:18:09', '2020-10-08 17:45:53'),
(67, 'En cas de problème d\'ajout sur .gitignore', '.gitignore ne fonctionne que sur les fichiers <mark>avant</mark> leur ajout via <pre><code>git add</code></pre><br />\r\nPour exclure un fichier déjà ajouté : <pre><code>git rm --cached nomdufichier</code></pre><br />\r\nMettre à jour ensuite le .gitignore', 'Git', '2020-10-08 17:43:52', '2020-10-08 17:45:22');
INSERT INTO `articles` (`id`, `titre`, `corps`, `categorie`, `created`, `modified`) VALUES
(68, 'CakePHP 4 : vider le cache via Bake', 'Se rendre dans le dossier du site<br />\r\n<pre><code>bin/cake cache clear_all</code></pre>', 'Cakephp 4', '2020-10-10 17:56:21', '2020-10-10 17:56:21');

-- --------------------------------------------------------

--
-- Structure de la table `tags`
--

CREATE TABLE `tags` (
  `id` int(11) NOT NULL,
  `categorie` varchar(191) DEFAULT NULL,
  `created` datetime DEFAULT NULL,
  `modified` datetime DEFAULT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;

--
-- Contenu de la table `tags`
--

INSERT INTO `tags` (`id`, `categorie`, `created`, `modified`) VALUES
(2, 'Cakephp 4', '2020-01-13 14:08:51', '2020-01-28 14:49:03'),
(4, 'Node JS', '2020-03-12 14:38:12', '2020-03-12 14:38:12'),
(5, 'Socket IO', '2020-03-12 14:38:18', '2020-03-12 14:38:18'),
(7, 'Apache', '2020-03-12 14:38:41', '2020-03-12 14:38:41'),
(8, 'MariaDB', '2020-03-12 14:38:49', '2020-03-12 14:38:49'),
(9, 'Phpmyadmin', '2020-03-12 14:39:03', '2020-03-12 14:39:03'),
(10, 'Git', '2020-03-12 14:39:12', '2020-05-23 10:13:42'),
(12, 'Composer', '2020-03-12 14:39:27', '2020-03-12 14:39:27'),
(13, 'Mozilla Firefox', '2020-03-12 14:39:47', '2020-03-12 14:39:47'),
(14, 'GNU Linux', '2020-03-12 14:40:10', '2020-03-12 14:40:10'),
(15, 'Let\'s Encrypt', '2020-03-14 21:15:05', '2020-03-14 21:15:05');

-- --------------------------------------------------------

--
-- Structure de la table `users`
--

CREATE TABLE `users` (
  `id` int(11) NOT NULL,
  `email` varchar(255) NOT NULL,
  `password` varchar(255) NOT NULL,
  `created` datetime DEFAULT NULL,
  `modified` datetime DEFAULT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

--
-- Contenu de la table `users`
--

INSERT INTO `users` (`id`, `email`, `password`, `created`, `modified`) VALUES
(2, 'christophekheder@gmail.com', '$2y$10$XCcd.0pr9JAvbyJ5yvpGNOMNERJh7jY.f.rcpLhhiV7XqgYQuH81y', '2020-01-08 09:03:27', '2020-03-19 10:12:18');

--
-- Index pour les tables exportées
--

--
-- Index pour la table `articles`
--
ALTER TABLE `articles`
  ADD PRIMARY KEY (`id`),
  ADD KEY `categorie` (`categorie`);

--
-- Index pour la table `tags`
--
ALTER TABLE `tags`
  ADD PRIMARY KEY (`id`),
  ADD UNIQUE KEY `title` (`categorie`);

--
-- Index pour la table `users`
--
ALTER TABLE `users`
  ADD PRIMARY KEY (`id`);

--
-- AUTO_INCREMENT pour les tables exportées
--

--
-- AUTO_INCREMENT pour la table `articles`
--
ALTER TABLE `articles`
  MODIFY `id` int(11) NOT NULL AUTO_INCREMENT, AUTO_INCREMENT=69;
--
-- AUTO_INCREMENT pour la table `tags`
--
ALTER TABLE `tags`
  MODIFY `id` int(11) NOT NULL AUTO_INCREMENT, AUTO_INCREMENT=18;
--
-- AUTO_INCREMENT pour la table `users`
--
ALTER TABLE `users`
  MODIFY `id` int(11) NOT NULL AUTO_INCREMENT, AUTO_INCREMENT=3;
--
-- Contraintes pour les tables exportées
--

--
-- Contraintes pour la table `articles`
--
ALTER TABLE `articles`
  ADD CONSTRAINT `fk_tags_categorie` FOREIGN KEY (`categorie`) REFERENCES `tags` (`categorie`) ON DELETE CASCADE;

/*!40101 SET CHARACTER_SET_CLIENT=@OLD_CHARACTER_SET_CLIENT */;
/*!40101 SET CHARACTER_SET_RESULTS=@OLD_CHARACTER_SET_RESULTS */;
/*!40101 SET COLLATION_CONNECTION=@OLD_COLLATION_CONNECTION */;
